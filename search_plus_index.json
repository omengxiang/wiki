{"./":{"url":"./","title":"关于","keywords":"","body":"项目介绍 思路：通过将 Wiki 文档内容的仓库托管在 GitHub 之上，并且将 GitBook 框架的代码放在仓库中 ，然后找一台有 Node.js 环境的服务器，通过简单的几行命令就能部署成功，十分钟内能搞定。从而具备多人协作、版本控制、Markdown 写作、代码高亮、实时更新的特性。 一、效果展示 1、Material Design 中文版（有侧边栏菜单） 页面效果：http://zitiao.org/material-design/ 文档仓库：https://github.com/zitiaocn/material-design 2、GitBook Help Center（无侧边栏菜单） 页面效果：https://help.gitbook.com/ 文档仓库：https://github.com/GitbookIO/help.gitbook.com 二、功能特性 1、页面美观 主要体现在两个方面：其一，页面的外观，请回头看看上面的效果图。其二，链接的格式，如下： GitBook 链接示例：http://zitiao.org/material-design/usability/accessibility.html MDwiki 链接示例：http://dynalon.github.io/mdwiki/#!layout.md （我个人见不得 #、! 之类的字符） 2、多人协作 & 版本控制 文档内容托管于 GitHub 之上，GitHub 本身就具备 多人协作 和 版本控制 的功能。当然所有的 Git 托管平台都可以，比如说国外的 GitLab、Bitbucket，或者国内的 git.oschina.net、coding.net 都行。 如果希望仓库私有，国外产品推荐 Bitbucket，因为他私有仓库免费，而 GitHub 私有仓库收费。国内的好像私有仓库都免费，在安全性和稳定性方面可能不如 Bitbucket。 3、Markdown 写作 文档内容托管于 GitHub 之上，GitHub 本身就具备 Markdown 写作 的功能。 4、代码高亮 通过 GitBook 的插件能很容易支持代码高亮（这就是站在巨人的肩膀上的好处）。 5、实时更新 通过给 GitHub 仓库配置 webhook 进行 push 时的消息推送，能触发服务器实时更新（服务器上需要些代码）。 6、一键部署 只需要简单的几行命令就部署完毕。 三、所需资源 唯一的一个条件就是，一台支持 Node.js 的服务器（公网和内网服务器都行）。 四、交流学习 欢迎加群详聊 如果扫码加群不成功，请添加四勾的个人微信，再由四勾邀请入群，加好友时请填写验证信息「字条网加群」 添加 四勾 4J 个人微信 vincent4j。 via http://4jplus.com "},"create.html":{"url":"create.html","title":"项目搭建","keywords":"","body":"项目搭建 一、Fork 示例项目 示例项目：https://github.com/zitiaocn/simple 二、项目结构 这里只罗列需要关注的部分，我们的初衷是先以最小的代价将项目跑起来再说，至于优化或进阶的功能后面再去摸索，讲的太多反倒容易让人觉得这个框架很复杂。 images 用于存放图片 README.md 关于文档，在 SUMMARY.md 进行配置 SUMMARY.md 文档目录 book.json 文档框架，最核心的文件 deploy.md 一个示例文档，可以删除 下面重点阐述几个文件： 1、SUMMARY.md 文档的目录结构，所有需要展示的文档都需要在它里面进行罗列。 详细 GitBook 官方英文文档：https://toolchain.gitbook.com/pages.html 注：GitBook 支持文件夹，但是文件夹的根目录下必须要指定文件，否则在前台的菜单中点击父级目录的时候无法展开。比如说有一个文档路径是：xxx.com/simple/create.html 那么 xxx.com/simple/ 必须要对应一个文件，在 SUMMARY.md 里面；否则点击 create.html 父级菜单将不会展开子菜单。 2、book.json 需要注意的参数有 root，就是文档内容的根目录，如果文档结构如下： -- book.json -- docs 就是文档全部放在这个目录下 ----doc1.md ----doc2.md 那么 book.json 中 root 的值应该是 ./docs。 head_title head_description head_keywords 上面三个参数在标准的 GitBook 框架里面没有，是我们自己改造的，就是页面 SEO 相关的 title、description、keywords。 还有一个参数需要留意 prefix，它是通过插件自动生成 sitemap.xml 网站地图的前缀路径，我们当前生成的地图为：http://zitiao.org/deploy/sitemap.xml 其它没有提及的参数保持原样，如果想要深入了解，请参考 GitBook 的官方英文文档：https://toolchain.gitbook.com/config.html 三、修改 book.js 文件 按照上面章节中 book.js 各个字段的含义进行修改，修改成适合自己项目的就可以了。 四、填充文档内容 1、SUMMARY.md 完成目录文档，可以参考本文档的 SUMMARY.md 文件的写法，比较简单，不展开了： https://github.com/zitiaocn/deploy/edit/master/SUMMARY.md 2、撰写具体文档内容 不懂 Git 也没关系，可以直接在 GitHub 的网页端在线编辑。 完成上面的所有工作，下一步就是 项目部署，请看下一章。 "},"run.html":{"url":"run.html","title":"运行部署","keywords":"","body":"运行部署 一、将项目拉到服务器 进入到服务器对应目录（本地电脑和远程服务器都可以，我拿我的本地 mac 电脑来演示），并将代码克隆下来，我将项目克隆到我的 wwwroot 目录： vincent4j-mac:wwwroot vincent4j$ git clone git@github.com:zitiaocn/deploy.git 自动打出下面的文字，代表克隆代码成功： Cloning into 'deploy'... remote: Counting objects: 40, done. remote: Compressing objects: 100% (26/26), done. remote: Total 40 (delta 6), reused 36 (delta 5), pack-reused 0 Receiving objects: 100% (40/40), 23.04 KiB | 0 bytes/s, done. Resolving deltas: 100% (6/6), done. Checking connectivity... done. 二、安装环境 1、进入到项目目录 vincent4j-mac:wwwroot vincent4j$ cd deploy vincent4j-mac:deploy vincent4j$ 2、安装依赖环境 npm install gitbook-cli -g 执行完之后，再执行： npm install 上面两个命令执行的时间会比较长，请耐心等待，在这期间会将 Node.js 环境也一并安装。 3、安装 GitBook 模块 gitbook install 会安装所需的所有插件，当自动打印如下文字，代表安装成功： info: >> plugin \"sitemap-general\" installed with success 4、编译文件 依次执行下面三行命令： gitbook build 编译文件，编译后生成的静态文件会放置在 _book 目录。 rm -rf _book_cache cp -r _book _book_cache 将编译的文件从 _book 复制到 _book_cache，最终网站运行时是读取 _book_cache 目录下的文件。 5、运行 gitbook serve 当自动打印出如下文字，就代码运行成功： Starting server ... Serving book on http://localhost:4000 在浏览器里访问 http://localhost:4000 就能看到文档了，就可以 乐开怀 咯。 三、注意事项 同一台服务器部署多个项目时，只需要安装一次 安装依赖环境。 "},"update.html":{"url":"update.html","title":"更新文档","keywords":"","body":"更新文档 一、手动更新 进入到项目路径，依次运行下面的命令： git pull 拉取最新的项目文件 gitbook build 编译文件，编译后生成的静态文件会放置在 _book 目录。 rm -rf _book_cache cp -r _book _book_cache 将编译的文件从 _book 复制到 _book_cache，最终网站运行时是读取 _book_cache 目录下的文件。 二、自动更新 1、在 GitHub 仓库中配置 webhook 2、在服务器上通过程序来接收事件 当代码有提交的时候，GitHub 会往上面的地址推送消息，服务器接收到消息之后，执行 手动更新 里的脚本就可以了。 具体的代码如何实现，就交给公司的研发人员了，我们就不在此细说，因为我也不懂代码，惭愧。 三、注意事项 如果在更新的时候 book.js 发生了变更，需要执行 gitbook install。 "},"advanced.html":{"url":"advanced.html","title":"进阶功能","keywords":"","body":"进阶功能 安装插件：https://toolchain.gitbook.com/plugins/ 更换主题：https://toolchain.gitbook.com/themes/ 生成离线：https://toolchain.gitbook.com/ebook.html "}}